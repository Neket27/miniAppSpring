void drawCube(GLfloat position, glm::mat4 transformMatrix, GLuint shader_programme) {
			dataPoint dataPoints;

			dataPoints.addCoordinates({ position,position,position });
			dataPoints.addCoordinates({ -position,position,position });
			dataPoints.addCoordinates({ position,-position,position });
			dataPoints.addCoordinates({ -position,-position,position });

			dataPoints.addCoordinates({ position,position,-position });
			dataPoints.addCoordinates({ -position,position,-position });
			dataPoints.addCoordinates({ position,-position,-position });
			dataPoints.addCoordinates({ -position,-position,-position });

			dataPoints.addCoordinates({ position,position,position });
		  	dataPoints.addCoordinates({-position,position,position});
		  	dataPoints.addCoordinates({position,position,-position});
			dataPoints.addCoordinates({ -position,position,-position});

			dataPoints.addCoordinates({ position,-position,position });
			dataPoints.addCoordinates({ -position,-position,position });
			dataPoints.addCoordinates({ position,-position,-position });
			dataPoints.addCoordinates({ -position,-position,-position });

			dataPoints.addCoordinates({ position,position,position });
			dataPoints.addCoordinates({ position,-position,position });
			dataPoints.addCoordinates({ position,position,-position });
			dataPoints.addCoordinates({ position,-position,-position });

			dataPoints.addCoordinates({ -position,position,position });
			dataPoints.addCoordinates({ -position,-position,position });
			dataPoints.addCoordinates({ -position,position,-position });
			dataPoints.addCoordinates({ -position,-position,-position });



		 dataPoints.addColors({ 1.0f,0.7f,1.0f});
		 dataPoints.addColors({1.0f,0.7f,1.0f});
		 dataPoints.addColors({1.0f,0.7f,1.0f});
		 dataPoints.addColors({1.0f,0.7f,1.0f});

		 dataPoints.addColors({0.6f,1.0f,0.0f});
		 dataPoints.addColors({0.6f,1.0f,0.0f});
		 dataPoints.addColors({0.6f,1.0f,0.0f});
		 dataPoints.addColors({0.6f,1.0f,0.0f});

		 dataPoints.addColors({1.0f,0.0f,0.5f});
		 dataPoints.addColors({1.0f,0.0f,0.5f});
		 dataPoints.addColors({1.0f,0.0f,0.5f});
		 dataPoints.addColors({1.0f,0.0f,0.5f});

		 dataPoints.addColors({0.0f,0.2f,1.0f});
		 dataPoints.addColors({0.0f,0.2f,1.0f});
		 dataPoints.addColors({0.0f,0.2f,1.0f});
		 dataPoints.addColors({0.0f,0.2f,1.0f});

		 dataPoints.addColors({1.0f,1.0f,0.0f});
		 dataPoints.addColors({1.0f,1.0f,0.0f});
		 dataPoints.addColors({1.0f,1.0f,0.0f});
		 dataPoints.addColors({1.0f,1.0f,0.0f});

		 dataPoints.addColors({0.9f,1.0f,1.0f});
		 dataPoints.addColors({0.9f,1.0f,1.0f});
		 dataPoints.addColors({0.9f,1.0f,1.0f});
		 dataPoints.addColors({0.9f,1.0f,1.0f});

		std::vector<GLuint> indexes = { 0,1,2,
							  3,1,2,

							  4,5,6,
							  7,5,6,

							  8,9,10,
							  11,9,10,

							  12,13,14,
							  15,13,14,

							  16,17,18,
							  19,17,18,

							  20,21,22,
							  23,21,22,

		};
		drawSmth(dataPoints, indexes, transformMatrix, shader_programme, GL_TRIANGLES);
	}

////////////////////////////////////////////////////////

	void drawSmth(dataPoint dataPoints, std::vector<GLuint> indexes, glm::mat4 transformMatrix, GLuint shader_programme, GLenum type) {
	GLuint stm = glGetUniformLocation(shader_programme, "transform");
	glUniformMatrix4fv(stm, 1, GL_FALSE, &transformMatrix[0][0]);

	//БУФЕРЫ
	GLuint coords_vbo = 0;
	glGenBuffers(1, &coords_vbo);
	glBindBuffer(GL_ARRAY_BUFFER, coords_vbo);
	glBufferData(GL_ARRAY_BUFFER, dataPoints.sizeDataPoints * sizeof(GLfloat), dataPoints.getCoordinatesData(), GL_STATIC_DRAW);

	GLuint colors_vbo = 0;
	glGenBuffers(1, &colors_vbo);
	glBindBuffer(GL_ARRAY_BUFFER, colors_vbo);
	glBufferData(GL_ARRAY_BUFFER, dataPoints.sizeDataPoints * sizeof(GLfloat), dataPoints.getColorsData(), GL_STATIC_DRAW);

	GLuint elementbuffer;
	glGenBuffers(1, &elementbuffer);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, indexes.size() * sizeof(GLuint), indexes.data(), GL_STATIC_DRAW);
	// end БУФЕРЫ

	//Массив
	GLuint vao = 0;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);
	glBindBuffer(GL_ARRAY_BUFFER, coords_vbo);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, NULL);
	glBindBuffer(GL_ARRAY_BUFFER, colors_vbo);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, NULL);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer);
	// end массивы

	//Отрисовка
	glDrawElements(type, indexes.size(), GL_UNSIGNED_INT, 0);
	// end Отрисовка


	//Освобождение памяти
	glDeleteVertexArrays(1, &vao);
	glDeleteBuffers(1, &coords_vbo);
	glDeleteBuffers(1, &colors_vbo);
	glDeleteBuffers(1, &elementbuffer);
	// end Освобождение памяти
}


/////////////////////////////////////////

void task_3(GLuint shader_programme) {
	glm::mat4 transformMatrix1 = glm::mat4(1.0f);
	transformMatrix1 = glm::translate(transformMatrix1, { 0.0f,0.0f,-4.0f });
	glm::mat4 projMatrix = glm::ortho(-1.0f, 0.9f, -0.9f, 1.0f, 2.0f, 9.0f);
	transformMatrix1 = glm::rotate(transformMatrix1, glm::radians(x), glm::vec3(1.0, 0.0, 0.0));
	transformMatrix1 = glm::rotate(transformMatrix1, glm::radians(y), glm::vec3(0.0, 1.0, 0.0));
	drawCube(0.5f, projMatrix * transformMatrix1, shader_programme);
}

